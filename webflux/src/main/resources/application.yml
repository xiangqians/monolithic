spring:
  application:
    name: '@artifactId@'
    version: '@version@'
    description: '@description@'
  profiles:
    active: '@spring.profiles.active@'

# MyBatis配置
mybatis:
  # Mapper XML 文件路径，用于指定 MyBatis 的 Mapper 文件位置，多个文件用逗号分隔
  mapper-locations: classpath:mybatis/mapper/**/*Mapper.xml
  configuration:
    # 开启驼峰命名转换，将数据库下划线列名转为驼峰式命名
    map-underscore-to-camel-case: true

    # MyBatis自动映射策略：MyBatis在将数据库查询结果映射到Java对象时的自动映射策略
    # 在MyBatis中，有以下几种自动映射策略：
    # 1、NONE：不启用自动映射
    # 2、PARTIAL：只对非嵌套的 resultMap 进行自动映射
    # 3、FULL：对所有的 resultMap 都进行自动映射
    auto-mapping-behavior: FULL

    # 日志配置
    # 1、org.apache.ibatis.logging.nologging.NoLoggingImpl
    #   含义：不记录任何日志信息。当使用这个实现时，MyBatis 将完全禁止日志记录，不输出任何与 SQL 执行相关的信息。
    #   使用场景：生产环境中通常使用，可以减少日志输出对性能的影响。
    # 2、org.apache.ibatis.logging.stdout.StdOutImpl
    #   含义：将日志信息输出到控制台（标准输出流）。
    #   使用场景：用于开发和调试阶段，可以直接在控制台上查看 MyBatis 生成的 SQL 语句和相关调试信息。
    # 3、org.apache.ibatis.logging.slf4j.Slf4jImpl
    #   含义：将日志信息输出到 SLF4J 日志框架中。
    #   使用场景：结合 SLF4J 接口和具体的日志实现（如 Logback、Log4j 等），可以将 MyBatis 的日志集成到应用程序的整体日志管理中。
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl

# Actuator 配置
management:
  # 开启环境变量info信息配置
  info:
    env:
      enabled: true
  endpoints:
    # org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties
    web:
      exposure:
        include: '*'
    # org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties
    jmx:
      exposure:
        include: '*'
  endpoint:
    # 健康检测
    health:
      enabled: true
      show-details: always
    # 开启info端点
    info:
      enabled: true
    beans:
      enabled: true
    metrics:
      enabled: true

  metrics:
    # 设置tag
    tags:
      application: ${spring.application.name}
