package org.xiangqian.monolithic.util;

import lombok.SneakyThrows;
import org.apache.commons.collections4.CollectionUtils;
import org.junit.Before;
import org.junit.Test;
import org.springframework.data.redis.connection.stream.*;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

/**
 * @author xiangqian
 * @date 19:38 2024/06/21
 */
public class RedisStreamTest {

    private Redis redis;
    private Redis.Stream stream;
    private String groupName;
    private String consumerName;

    @Before
    public final void before() {
        redis = Redis.create();
        stream = redis.Stream("test-stream");
        groupName = "group-1";
        consumerName = "consumer-1";
    }

    @Test
    public void testCreateGroup() {
        stream.createGroup(groupName, ReadOffset.latest());
    }

    @Test
    @SneakyThrows
    public void testGetGroups() {
        StreamInfo.XInfoGroups xInfoGroups = stream.getGroups();
        for (StreamInfo.XInfoGroup xInfoGroup : xInfoGroups) {
            System.out.format("消费者组名称：%s" +
                            "\n\t消费者数量：%s" +
                            "\n\t待处理消息数量，指在消费者组中尚未被任何消费者处理的消息数量：%s" +
                            "\n\t最后一条已交付给消费者的消息ID：%s" +
                            "\n",
                    xInfoGroup.groupName(),
                    xInfoGroup.consumerCount(),
                    xInfoGroup.pendingCount(),
                    xInfoGroup.lastDeliveredId()).println();
        }
    }

    @Test
    @SneakyThrows
    public void testGetConsumers() {
        StreamInfo.XInfoConsumers xInfoConsumers = stream.getConsumers(groupName);
        for (StreamInfo.XInfoConsumer xInfoConsumer : xInfoConsumers) {
            System.out.format("消费者组名称：%s" +
                            "\n\t消费者名称：%s" +
                            "\n\t待处理消息数量，指在消费者组中尚未被任何消费者处理的消息数量：%s" +
                            "\n",
                    xInfoConsumer.groupName(),
                    xInfoConsumer.consumerName(),
                    xInfoConsumer.pendingCount()).println();
        }
    }

    @Test
    @SneakyThrows
    public void testPending() {
        PendingMessagesSummary pendingMessagesSummary = stream.pending(groupName);
        System.out.println(pendingMessagesSummary);

        PendingMessages pendingMessages = stream.pending(groupName, consumerName);
        System.out.println(pendingMessages);
    }


    @Test
    @SneakyThrows
    public void testAdd() {
        int count = 1;
        while (count-- > 0) {
            RecordId recordId = stream.add(Map.of("time", DateTimeUtil.format(LocalDateTime.now())));

            // 是否是自动生成
            boolean shouldBeAutoGenerated = recordId.shouldBeAutoGenerated();
            System.out.format("shouldBeAutoGenerated: %s", shouldBeAutoGenerated).println();

            // id值
            String value = recordId.getValue();
            System.out.format("value: %s", value).println();

            // 序列号
            long sequence = recordId.getSequence();
            System.out.format("sequence: %s", sequence).println();

            // 时间戳
            long timestamp = recordId.getTimestamp();
            System.out.format("timestamp: %s", timestamp).println();
            System.out.println();

            TimeUnit.SECONDS.sleep(2);
        }
    }

    @Test
    @SneakyThrows
    public void testRead() {
        List<MapRecord<String, String, String>> mapRecords = stream.read(groupName, consumerName);
        if (CollectionUtils.isNotEmpty(mapRecords)) {
            for (MapRecord<String, String, String> mapRecord : mapRecords) {
                System.out.format("消息ID = %s, 消息的key和value = %s", mapRecord.getId(), mapRecord.getValue()).println();
            }
        } else {
            System.out.println("[]");
        }
    }

    @Test
    @SneakyThrows
    public void testStreamReceive() {
//        stream.receive(ThreadPoolExecutor.create().getThreadPoolExecutor(), 1, message -> {
//            // 消息ID
//            RecordId messageId = message.getId();
//
//            // 消息的key和value
//            Map<String, String> body = message.getValue();
//
//            System.out.format("%s %s", messageId, body).println();
//
//            return false;
//        });
    }


}
